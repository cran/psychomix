
> options(width = 70, prompt = "R> ", continue = "+  ")

> library("psychomix")
Loading required package: flexmix
Loading required package: lattice
Loading required package: psychotools

> set.seed(1090)

> cache <- FALSE

> generateDesign <- function(nobs = 500, m = 20, weights = NULL, 
+     ab = 0, ab.dist = c("fix", "normal"), dif = 2, beta = 1.9, 
+     index = 5, c .... [TRUNCATED] 

> stacked_bars <- function(rs, cl = NULL, max = NULL, 
+     col = NULL, ...) {
+     if (is.null(max)) 
+         max <- max(rs)
+     rs <- factor(r .... [TRUNCATED] 

> mygrays <- gray.colors(2)

> myhcl <- psychomix:::qualitative_hcl(3)

> load("scoresim.rda")

> scoresim$prop23 <- 1 - scoresim$prop1

> par(mfrow = c(1, 2))

> par(mar = c(2, 4, 2, 2) + 0.1)

> des <- generateDesign(ab = 0, dif = 2)

> set.seed(1)

> dat <- simRaschmix(des)

> rs <- rowSums(dat)

> cl <- factor(as.numeric(attr(dat, "cluster") > 2) + 
+     1)

> ip <- attr(dat, "difficulty")[, 2:3]

> plot(ip[, 1], type = "n", ylab = "Item difficulty", 
+     xlab = "")

> points(ip[, 2], type = "o", pch = 21, col = 1, bg = mygrays[2], 
+     lty = 2)

> points(ip[, 1], pch = 20, col = mygrays[1])

> stacked_bars(rs, cl, max = 20, ylab = "Score frequencies")

> par(mfrow = c(1, 2))

> par(mar = c(2, 4, 2, 2) + 0.1)

> des <- generateDesign(ab = 1, dif = 0)

> set.seed(1)

> dat <- simRaschmix(des)

> rs <- rowSums(dat)

> cl <- factor(as.numeric(attr(dat, "cluster") > 2) + 
+     1)

> ip <- attr(dat, "difficulty")[, 2:3]

> plot(ip[, 1], type = "b", pch = 21, bg = mygrays[2], 
+     lty = 2, ylab = "Item difficulty", xlab = "")

> stacked_bars(rs, cl = NULL, max = 20, ylab = "Score frequencies", 
+     xlab = "")

> par(mfrow = c(1, 1))

> par(mfrow = c(1, 2))

> par(mar = c(2, 4, 2, 2) + 0.1)

> des <- generateDesign(ab = 1, dif = 2, coincide = FALSE)

> set.seed(1)

> dat <- simRaschmix(des)

> rs <- rowSums(dat)

> cl <- factor(as.numeric(attr(dat, "cluster") > 2) + 
+     1)

> ip <- attr(dat, "difficulty")[, 2:3]

> stacked_bars(rs, cl, max = 20, ylab = "Score frequencies", 
+     xlab = "")

> des <- generateDesign(ab = 1, dif = 2, coincide = TRUE)

> set.seed(1)

> dat <- simRaschmix(des)

> rs <- rowSums(dat)

> cl <- factor(as.numeric(attr(dat, "cluster") > 2) + 
+     1)

> ip <- attr(dat, "difficulty")[, 2:3]

> stacked_bars(rs, cl, max = 20, ylab = "Score frequencies", 
+     xlab = "")

> par(mfrow = c(1, 1))

> par(mar = c(4, 4, 2, 2) + 0.1)

> plot(prop23 ~ delta, data = scoresim, subset = theta == 
+     0 & scores == "saturated", ylim = c(0, 1), type = "b", xlab = expression(paste("DIF e ..." ... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     0 & scores == "meanvar", type = "b", col = myhcl[2], lty = 1, 
+     pch = 1)

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     0 & scores == "restricted", type = "b", col = myhcl[1], lty = 2, 
+     pch = 6)

> legend("topleft", legend = c("saturated", "mean-variance", 
+     "restricted"), col = myhcl[3:1], lty = c(3, 1, 2), pch = c(3, 
+     1, 6), bty =  .... [TRUNCATED] 

> par(mar = c(5, 4, 4, 2) + 0.1)

> par(mar = c(4, 4, 2, 2) + 0.1)

> plot(prop23 ~ theta, data = scoresim, subset = delta == 
+     0 & scores == "saturated", ylim = c(0, 1), type = "b", xlab = expression(paste("Impac ..." ... [TRUNCATED] 

> lines(prop23 ~ theta, data = scoresim, subset = delta == 
+     0 & scores == "meanvar", type = "b", col = myhcl[2], lty = 1, 
+     pch = 1)

> lines(prop23 ~ theta, data = scoresim, subset = delta == 
+     0 & scores == "restricted", type = "b", col = myhcl[1], lty = 2, 
+     pch = 6)

> legend("topleft", legend = c("saturated", "mean-variance", 
+     "restricted"), col = myhcl[3:1], lty = c(3, 1, 2), pch = c(3, 
+     1, 6), bty =  .... [TRUNCATED] 

> par(mar = c(5, 4, 4, 2) + 0.1)

> par(mfrow = c(1, 3))

> layout(matrix(c(rep(1, 5), rep(2, 4), rep(3, 5)), 
+     nrow = 1, byrow = TRUE))

> par(mar = c(5, 4, 4, 0.5) + 0.1)

> plot(prop23 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "saturated" & (scenario == 4 | delta == 0), 
+     main = expression( .... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "meanvar" & (scenario == 4 | delta == 0), 
+     type = "b", col = m .... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "restricted" & (scenario == 4 | delta == 
+     0), type = "b", col  .... [TRUNCATED] 

> legend("topleft", legend = c("saturated", "mean-variance", 
+     "restricted"), col = myhcl[3:1], lty = c(3, 1, 2), pch = c(3, 
+     1, 6), bty =  .... [TRUNCATED] 

> par(mar = c(5, 0.5, 4, 0.5) + 0.1)

> plot(prop23 ~ delta, data = scoresim, subset = theta == 
+     2 & scores == "saturated" & (scenario == 4 | delta == 0), 
+     main = expression(pa .... [TRUNCATED] 

> box()

> axis(1)

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     2 & scores == "meanvar" & (scenario == 4 | delta == 0), type = "b", 
+     col = myh .... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     2 & scores == "restricted" & (scenario == 4 | delta == 0), 
+     type = "b", col =  .... [TRUNCATED] 

> par(mar = c(5, 0.5, 4, 4) + 0.1)

> plot(prop23 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "saturated" & (scenario == 4 | delta == 0), 
+     main = expression( .... [TRUNCATED] 

> box()

> axis(1)

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & (scenario == 4 | delta == 0), 
+     type = "b", col = m .... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "restricted" & (scenario == 4 | delta == 
+     0), type = "b", col  .... [TRUNCATED] 

> par(mar = c(5, 4, 4, 2) + 0.1, mfrow = c(1, 1))

> par(mar = c(4, 4, 4, 2) + 0.1)

> plot(prop3 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & (scenario == 4 | delta == 0), 
+     type = "b", ylim = c( .... [TRUNCATED] 

> lines(prop3 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & (scenario == 5 | delta == 0), 
+     type = "b", col = my .... [TRUNCATED] 

> lines(prop2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & (scenario == 4 | delta == 0), 
+     type = "b", col = my .... [TRUNCATED] 

> lines(prop2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & (scenario == 5 | delta == 0), 
+     type = "b", col = my .... [TRUNCATED] 

> legend("topleft", legend = c(expression(paste(hat(K), 
+     " = 2 - Sc 4", sep = "")), expression(paste(hat(K), " = 3 - Sc 4", 
+     sep = "")), e .... [TRUNCATED] 

> par(mar = c(5, 4, 4, 2) + 0.1)

> par(mfrow = c(1, 3))

> layout(matrix(c(rep(1, 5), rep(2, 4), rep(3, 5)), 
+     nrow = 1, byrow = TRUE))

> par(mar = c(5, 4, 4, 0.5) + 0.1)

> plot(prop23 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "saturated" & (scenario == 5 | delta == 0), 
+     main = expression( .... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "meanvar" & (scenario == 5 | delta == 0), 
+     type = "b", col = m .... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "restricted" & (scenario == 5 | delta == 
+     0), type = "b", col  .... [TRUNCATED] 

> legend("topleft", legend = c("saturated", "mean-variance", 
+     "restricted"), col = myhcl[3:1], lty = c(3, 1, 2), pch = c(3, 
+     1, 6), bty =  .... [TRUNCATED] 

> par(mar = c(5, 0.5, 4, 0.5) + 0.1)

> plot(prop23 ~ delta, data = scoresim, subset = theta == 
+     2 & scores == "saturated" & (scenario == 5 | delta == 0), 
+     main = expression(pa .... [TRUNCATED] 

> box()

> axis(1)

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     2 & scores == "meanvar" & (scenario == 5 | delta == 0), type = "b", 
+     col = myh .... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     2 & scores == "restricted" & (scenario == 5 | delta == 0), 
+     type = "b", col =  .... [TRUNCATED] 

> par(mar = c(5, 0.5, 4, 4) + 0.1)

> plot(prop23 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "saturated" & (scenario == 5 | delta == 0), 
+     main = expression( .... [TRUNCATED] 

> box()

> axis(1)

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & (scenario == 5 | delta == 0), 
+     type = "b", col = m .... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "restricted" & (scenario == 5 | delta == 
+     0), type = "b", col  .... [TRUNCATED] 

> par(mar = c(5, 4, 4, 2) + 0.1, mfrow = c(1, 1))

> par(mfrow = c(1, 3))

> layout(matrix(c(rep(1, 5), rep(2, 4), rep(3, 5)), 
+     nrow = 1, byrow = TRUE))

> par(mar = c(5, 4, 4, 0.5) + 0.1)

> plot(rand2 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "saturated" & scenario == 4 & delta > 0, 
+     main = expression(past .... [TRUNCATED] 

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "meanvar" & scenario == 4 & delta > 0, type = "b", 
+     col = myhcl .... [TRUNCATED] 

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "restricted" & scenario == 4 & delta > 0, 
+     type = "b", col = my .... [TRUNCATED] 

> legend("topleft", legend = c("saturated", "mean-variance", 
+     "restricted"), col = myhcl[3:1], lty = c(3, 1, 2), pch = c(3, 
+     1, 6), bty =  .... [TRUNCATED] 

> par(mar = c(5, 0.5, 4, 0.5) + 0.1)

> plot(rand2 ~ delta, data = scoresim, subset = theta == 
+     2 & scores == "saturated" & scenario == 4 & delta > 0, main = expression(paste("Impact ..." ... [TRUNCATED] 

> box()

> axis(1)

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     2 & scores == "meanvar" & scenario == 4 & delta > 0, type = "b", 
+     col = myhcl[2 .... [TRUNCATED] 

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     2 & scores == "restricted" & scenario == 4 & delta > 0, type = "b", 
+     col = myhc .... [TRUNCATED] 

> par(mar = c(5, 0.5, 4, 4) + 0.1)

> plot(rand2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "saturated" & scenario == 4 & delta > 0, 
+     main = expression(past .... [TRUNCATED] 

> box()

> axis(1)

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & scenario == 4 & delta > 0, type = "b", 
+     col = myhcl .... [TRUNCATED] 

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "restricted" & scenario == 4 & delta > 0, 
+     type = "b", col = my .... [TRUNCATED] 

> par(mar = c(5, 4, 4, 2) + 0.1, mfrow = c(1, 1))

> par(mfrow = c(1, 3))

> layout(matrix(c(rep(1, 5), rep(2, 4), rep(3, 5)), 
+     nrow = 1, byrow = TRUE))

> par(mar = c(5, 4, 4, 0.5) + 0.1)

> plot(rand2 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "saturated" & scenario == 5 & delta > 0, 
+     main = expression(past .... [TRUNCATED] 

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "meanvar" & scenario == 5 & delta > 0, type = "b", 
+     col = myhcl .... [TRUNCATED] 

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "restricted" & scenario == 5 & delta > 0, 
+     type = "b", col = my .... [TRUNCATED] 

> legend("topleft", legend = c("saturated", "mean-variance", 
+     "restricted"), col = myhcl[3:1], lty = c(3, 1, 2), pch = c(3, 
+     1, 6), bty =  .... [TRUNCATED] 

> par(mar = c(5, 0.5, 4, 0.5) + 0.1)

> plot(rand2 ~ delta, data = scoresim, subset = theta == 
+     2 & scores == "saturated" & scenario == 5 & delta > 0, main = expression(paste("Impact ..." ... [TRUNCATED] 

> box()

> axis(1)

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     2 & scores == "meanvar" & scenario == 5 & delta > 0, type = "b", 
+     col = myhcl[2 .... [TRUNCATED] 

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     2 & scores == "restricted" & scenario == 5 & delta > 0, type = "b", 
+     col = myhc .... [TRUNCATED] 

> par(mar = c(5, 0.5, 4, 4) + 0.1)

> plot(rand2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "saturated" & scenario == 5 & delta > 0, 
+     main = expression(past .... [TRUNCATED] 

> box()

> axis(1)

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & scenario == 5 & delta > 0, type = "b", 
+     col = myhcl .... [TRUNCATED] 

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "restricted" & scenario == 5 & delta > 0, 
+     type = "b", col = my .... [TRUNCATED] 

> par(mar = c(5, 4, 4, 2) + 0.1, mfrow = c(1, 1))

> data("VerbalAggression", package = "psychotools")

> VerbalAggression$resp2 <- VerbalAggression$resp2[, 
+     1:12]

> va12 <- subset(VerbalAggression, rowSums(resp2) > 
+     0 & rowSums(resp2) < 12)

> items <- colnames(va12$resp2)

> if (cache & file.exists("va12_mvR.rda")) {
+     load("va12_mvR.rda")
+ } else {
+     set.seed(403)
+     mvR <- raschmix(resp2 ~ 1, data = va12, k .... [TRUNCATED] 
1 : * * *
2 : * * *
3 : * * *
4 : * * *

> mvRbic <- round(BIC(mvR), digits = 1)

> mvR3 <- getModel(mvR, which = "BIC")

> if (cache & file.exists("va12_m3.rda")) {
+     load("va12_m3.rda")
+ } else {
+     sat3 <- raschmix(resp2 ~ 1, data = va12, k = 3, scores = "satur ..." ... [TRUNCATED] 
3 : * * *
3 : * * *
3 : * * *

> library("lmtest")
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric


Attaching package: 'lmtest'

The following object is masked _by_ '.GlobalEnv':

    ip


> lrtest(sat3, mv3, mvR3)
Likelihood ratio test

Model 1: sat3
Model 2: mv3
Model 3: mvR3
  #Df  LogLik  Df   Chisq Pr(>Chisq)  
1  65 -1795.2                         
2  41 -1812.2 -24 33.9187    0.08612 .
3  37 -1816.9  -4  9.4519    0.05075 .
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

> lrtest(sat3, satR3, mvR3)
Likelihood ratio test

Model 1: sat3
Model 2: satR3
Model 3: mvR3
  #Df  LogLik  Df   Chisq Pr(>Chisq)   
1  65 -1795.2                          
2  45 -1814.1 -20 37.7143   0.009595 **
3  37 -1816.9  -8  5.6563   0.685672   
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

> clsizes <- table(clusters(mvR3))

> par(mar = rep(0, 4))

> node <- function(x, y, lab, eps = 0.11, col = mygrays[2]) {
+     polygon(x + c(-1, -1, 1, 1, -1) * eps, y + c(-1, 1, 1, -1, 
+         -1) * eps, c .... [TRUNCATED] 

> edge <- function(x1, y1, x2, y2, lab, eps = 0.13, 
+     length = 0.1, ...) {
+     if (x1 == x2) {
+         arrows(x1, y1 + eps, x2, y2 - eps, len .... [TRUNCATED] 

> plot(0, 0, xlim = c(0, 1), ylim = c(0, 1), type = "n", 
+     axes = FALSE, xlab = "", ylab = "")

> node(0.2, 0.2, sprintf("saturated\n(BIC: %s)", format(round(BIC(sat3), 
+     digits = 1), nsmall = 1)))

> node(0.2, 0.8, sprintf("saturated\nrestricted\n(BIC: %s)", 
+     format(round(BIC(satR3), digits = 1), nsmall = 1)))

> node(0.8, 0.2, sprintf("mean-variance\n(BIC: %s)", 
+     format(round(BIC(mv3), digits = 1), nsmall = 1)))

> node(0.8, 0.8, sprintf("mean-variance\nrestricted\n(BIC: %s)", 
+     format(round(BIC(mvR3), digits = 1), nsmall = 1)))

> edge(0.2, 0.2, 0.2, 0.8, format(round(lrtest(sat3, 
+     satR3)[2, 5], digits = 3), nsmall = 3))

> edge(0.2, 0.8, 0.8, 0.8, format(round(lrtest(satR3, 
+     mvR3)[2, 5], digits = 3), nsmall = 3))

> edge(0.2, 0.2, 0.8, 0.2, format(round(lrtest(sat3, 
+     mv3)[2, 5], digits = 3), nsmall = 3))

> edge(0.8, 0.2, 0.8, 0.8, format(round(lrtest(mv3, 
+     mvR3)[2, 5], digits = 3), nsmall = 3))

> par(mar = c(5, 4, 4, 2) + 0.1)

> trellis.par.set(theme = standard.theme(color = FALSE))

> xyplot(mvR3)

 *** Run successfully completed ***
> proc.time()
   user  system elapsed 
 60.068   0.172  60.334 
