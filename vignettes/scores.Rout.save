
> options(width = 70, prompt = "R> ", continue = "+  ")

> library("psychomix")
Loading required package: flexmix
Loading required package: lattice
Loading required package: psychotools

> set.seed(1090)

> cache <- FALSE

> mygrays <- gray.colors(2)

> par(mar = c(0.1, 6, 3, 0.1), las = 1)

> plot(0, 0, xlim = c(-0.2, 3), ylim = c(0.2, 1.8), 
+     type = "n", axes = FALSE, xlab = "", ylab = "")

> points(rep(c(0 + 0:3/5.5, 1 + 0:3/5.5), 2), rep(c(1.5, 
+     0.5), each = 8), pch = 21, bg = mygrays[c(rep(1, 4), rep(2, 
+     4), 1, 2, 1, 2, 2,  .... [TRUNCATED] 

> axis(2, at = c(1.5, 0.5), c("Coinciding", "Not coinciding"), 
+     lwd = 0, pos = -0.2, line = 0)

> axis(3, at = c(0, 1), c("School type I\n(low ability)", 
+     "School type II\n(high ability)"), lwd = 0, hadj = 0)

> legend(2, 1.7, c("standard", "specialized"), title = "Course type\n(source of DIF)", 
+     pch = 21, pt.bg = mygrays, bty = "n", title.adj = 0)

> generateDesign <- function(nobs = 500, m = 20, weights = NULL, 
+     ab = 0, ab.dist = c("fix", "normal"), dif = 2, beta = 1.9, 
+     index = 5, c .... [TRUNCATED] 

> stacked_bars <- function(rs, cl = NULL, max = NULL, 
+     col = NULL, ...) {
+     if (is.null(max)) 
+         max <- max(rs)
+     rs <- factor(r .... [TRUNCATED] 

> mygrays <- gray.colors(2)

> myhcl <- psychomix:::qualitative_hcl(3)

> load("scoresim.rda")

> scoresim$prop23 <- 1 - scoresim$prop1

> par(mfrow = c(1, 2))

> par(mar = c(2, 4, 2, 2) + 0.1)

> des <- generateDesign(ab = 0, dif = 2, ab.dist = "normal")

> set.seed(1)

> dat <- simRaschmix(des)

> rs <- rowSums(dat)

> cl <- factor(as.numeric(attr(dat, "cluster") > 2) + 
+     1)

> ip <- attr(dat, "difficulty")[, 2:3]

> plot(ip[, 1], type = "n", ylab = "Item difficulty", 
+     xlab = "")

> points(ip[, 2], type = "o", pch = 21, col = 1, bg = mygrays[2], 
+     lty = 2)

> points(ip[, 1], pch = 20, col = mygrays[1])

> stacked_bars(rs, cl, max = 20, ylab = "Score frequencies")

> par(mfrow = c(1, 2))

> par(mar = c(2, 4, 2, 2) + 0.1)

> des <- generateDesign(ab = 1, dif = 0, ab.dist = "normal")

> set.seed(1)

> dat <- simRaschmix(des)

> rs <- rowSums(dat)

> cl <- factor(as.numeric(attr(dat, "cluster") > 2) + 
+     1)

> ip <- attr(dat, "difficulty")[, 2:3]

> plot(ip[, 1], type = "b", pch = 21, bg = mygrays[2], 
+     lty = 2, ylab = "Item difficulty", xlab = "")

> stacked_bars(rs, cl = NULL, max = 20, ylab = "Score frequencies", 
+     xlab = "")

> par(mfrow = c(1, 1))

> par(mfrow = c(1, 2))

> par(mar = c(2, 4, 2, 2) + 0.1)

> des <- generateDesign(ab = 1, dif = 2, coincide = FALSE, 
+     ab.dist = "normal")

> set.seed(1)

> dat <- simRaschmix(des)

> rs <- rowSums(dat)

> cl <- factor(as.numeric(attr(dat, "cluster") > 2) + 
+     1)

> ip <- attr(dat, "difficulty")[, 2:3]

> stacked_bars(rs, cl, max = 20, ylab = "Score frequencies", 
+     xlab = "")

> des <- generateDesign(ab = 1, dif = 2, coincide = TRUE, 
+     ab.dist = "normal")

> set.seed(1)

> dat <- simRaschmix(des)

> rs <- rowSums(dat)

> cl <- factor(as.numeric(attr(dat, "cluster") > 2) + 
+     1)

> ip <- attr(dat, "difficulty")[, 2:3]

> stacked_bars(rs, cl, max = 20, ylab = "Score frequencies", 
+     xlab = "")

> par(mfrow = c(1, 1))

> par(mar = c(4, 4, 2, 2) + 0.1)

> plot(prop23 ~ delta, data = scoresim, subset = theta == 
+     0 & scores == "saturated", ylim = c(0, 1), type = "b", xlab = expression(paste("DIF e ..." ... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     0 & scores == "meanvar", type = "b", col = myhcl[2], lty = 1, 
+     pch = 1)

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     0 & scores == "restricted", type = "b", col = myhcl[1], lty = 2, 
+     pch = 6)

> legend("topleft", legend = c("saturated", "mean-variance", 
+     "restricted"), col = myhcl[3:1], lty = c(3, 1, 2), pch = c(3, 
+     1, 6), bty =  .... [TRUNCATED] 

> par(mar = c(5, 4, 4, 2) + 0.1)

> par(mar = c(4, 4, 2, 2) + 0.1)

> plot(prop23 ~ theta, data = scoresim, subset = delta == 
+     0 & scores == "saturated", ylim = c(0, 1), type = "b", xlab = expression(paste("Impac ..." ... [TRUNCATED] 

> lines(prop23 ~ theta, data = scoresim, subset = delta == 
+     0 & scores == "meanvar", type = "b", col = myhcl[2], lty = 1, 
+     pch = 1)

> lines(prop23 ~ theta, data = scoresim, subset = delta == 
+     0 & scores == "restricted", type = "b", col = myhcl[1], lty = 2, 
+     pch = 6)

> legend("topleft", legend = c("saturated", "mean-variance", 
+     "restricted"), col = myhcl[3:1], lty = c(3, 1, 2), pch = c(3, 
+     1, 6), bty =  .... [TRUNCATED] 

> par(mar = c(5, 4, 4, 2) + 0.1)

> par(mfrow = c(1, 2))

> layout(matrix(c(rep(1, 4), rep(2, 4)), nrow = 1, byrow = TRUE))

> par(mar = c(5, 4, 4, 0.5) + 0.1)

> plot(prop23 ~ delta, data = scoresim, subset = theta == 
+     2.4 & scores == "saturated" & (scenario == 4 | delta == 0), 
+     main = expression( .... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     2.4 & scores == "meanvar" & (scenario == 4 | delta == 0), 
+     type = "b", col = m .... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     2.4 & scores == "restricted" & (scenario == 4 | delta == 
+     0), type = "b", col  .... [TRUNCATED] 

> legend("topleft", legend = c("saturated", "mean-variance", 
+     "restricted"), col = myhcl[3:1], lty = c(3, 1, 2), pch = c(3, 
+     1, 6), bty =  .... [TRUNCATED] 

> par(mar = c(5, 0.5, 4, 4) + 0.1)

> plot(prop23 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "saturated" & (scenario == 4 | delta == 0), 
+     main = expression( .... [TRUNCATED] 

> box()

> axis(1)

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & (scenario == 4 | delta == 0), 
+     type = "b", col = m .... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "restricted" & (scenario == 4 | delta == 
+     0), type = "b", col  .... [TRUNCATED] 

> par(mar = c(5, 4, 4, 2) + 0.1, mfrow = c(1, 1))

> par(mar = c(4, 4, 4, 2) + 0.1)

> plot(prop3 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & (scenario == 4 | delta == 0), 
+     type = "b", ylim = c( .... [TRUNCATED] 

> lines(prop3 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & (scenario == 5 | delta == 0), 
+     type = "b", col = my .... [TRUNCATED] 

> lines(prop2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & (scenario == 4 | delta == 0), 
+     type = "b", col = my .... [TRUNCATED] 

> lines(prop2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & (scenario == 5 | delta == 0), 
+     type = "b", col = my .... [TRUNCATED] 

> legend("topleft", legend = c(expression(paste(hat(K), 
+     " = 2 - Sc 4", sep = "")), expression(paste(hat(K), " = 3 - Sc 4", 
+     sep = "")), e .... [TRUNCATED] 

> par(mar = c(5, 4, 4, 2) + 0.1)

> par(mfrow = c(1, 2))

> layout(matrix(c(rep(1, 4), rep(2, 4)), nrow = 1, byrow = TRUE))

> par(mar = c(5, 4, 4, 0.5) + 0.1)

> plot(prop23 ~ delta, data = scoresim, subset = theta == 
+     "2.4" & scores == "saturated" & (scenario == 5 | delta == 
+     0), main = expressio .... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     "2.4" & scores == "meanvar" & (scenario == 5 | delta == 0), 
+     type = "b", col = .... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     "2.4" & scores == "restricted" & (scenario == 5 | delta == 
+     0), type = "b", co .... [TRUNCATED] 

> par(mar = c(5, 0.5, 4, 4) + 0.1)

> plot(prop23 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "saturated" & (scenario == 5 | delta == 0), 
+     main = expression( .... [TRUNCATED] 

> box()

> axis(1)

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & (scenario == 5 | delta == 0), 
+     type = "b", col = m .... [TRUNCATED] 

> lines(prop23 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "restricted" & (scenario == 5 | delta == 
+     0), type = "b", col  .... [TRUNCATED] 

> legend("bottomright", legend = c("saturated", "mean-variance", 
+     "restricted"), col = myhcl[3:1], lty = c(3, 1, 2), pch = c(3, 
+     1, 6), bt .... [TRUNCATED] 

> par(mar = c(5, 4, 4, 2) + 0.1, mfrow = c(1, 1))

> par(mar = c(5, 4, 4, 2) + 0.1)

> layout(matrix(rep(1:4, each = 4), nrow = 2, byrow = TRUE))

> par(mar = c(1.5, 4, 4, 0.5) + 0.1)

> plot(rand2 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "saturated" & scenario == 4 & delta > 0, 
+     main = expression(past .... [TRUNCATED] 

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "meanvar" & scenario == 4 & delta > 0, type = "b", 
+     col = myhcl .... [TRUNCATED] 

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "restricted" & scenario == 4 & delta > 0, 
+     type = "b", col = my .... [TRUNCATED] 

> legend("topleft", legend = c("saturated", "mean-variance", 
+     "restricted"), col = myhcl[3:1], lty = c(3, 1, 2), pch = c(3, 
+     1, 6), bty =  .... [TRUNCATED] 

> par(mar = c(1.5, 0.5, 4, 4) + 0.1)

> plot(rand2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "saturated" & scenario == 4 & delta > 0, 
+     main = expression(past .... [TRUNCATED] 

> box()

> axis(1)

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & scenario == 4 & delta > 0, type = "b", 
+     col = myhcl .... [TRUNCATED] 

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "restricted" & scenario == 4 & delta > 0, 
+     type = "b", col = my .... [TRUNCATED] 

> text(4.4, 0.65, "Scenario 4", pos = 4, srt = 90, xpd = TRUE)

> par(mar = c(5, 4, 1, 0.5) + 0.1)

> plot(rand2 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "saturated" & scenario == 5 & delta > 0, 
+     ylim = c(0.5, 1), type .... [TRUNCATED] 

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "meanvar" & scenario == 5 & delta > 0, type = "b", 
+     col = myhcl .... [TRUNCATED] 

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     0.4 & scores == "restricted" & scenario == 5 & delta > 0, 
+     type = "b", col = my .... [TRUNCATED] 

> par(mar = c(5, 0.5, 1, 4) + 0.1)

> plot(rand2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "saturated" & scenario == 5 & delta > 0, 
+     ylim = c(0.5, 1), type .... [TRUNCATED] 

> box()

> axis(1)

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "meanvar" & scenario == 5 & delta > 0, type = "b", 
+     col = myhcl .... [TRUNCATED] 

> lines(rand2 ~ delta, data = scoresim, subset = theta == 
+     3.6 & scores == "restricted" & scenario == 5 & delta > 0, 
+     type = "b", col = my .... [TRUNCATED] 

> text(4.4, 0.65, "Scenario 5", pos = 4, srt = 90, xpd = TRUE)

> par(mar = c(5, 4, 4, 2) + 0.1, mfrow = c(1, 1))

> data("VerbalAggression", package = "psychotools")

> VerbalAggression$resp2 <- VerbalAggression$resp2[, 
+     1:12]

> va12 <- subset(VerbalAggression, rowSums(resp2) > 
+     0 & rowSums(resp2) < 12)

> items <- colnames(va12$resp2)

> if (cache & file.exists("va12_mvR.rda")) {
+     load("va12_mvR.rda")
+ } else {
+     set.seed(403)
+     mvR <- raschmix(resp2 ~ 1, data = va12, k .... [TRUNCATED] 
1 : * * *
2 : * * *
3 : * * *
4 : * * *

> mvR3 <- getModel(mvR, which = "BIC")

> clsizes <- table(clusters(mvR3))

> tabK <- data.frame(model = rep("restricted", 4), k = sapply(mvR@models, 
+     function(x) x@k), df = sapply(mvR@models, function(x) x@df), 
+     l .... [TRUNCATED] 

> if (cache & file.exists("va12_m3.rda")) {
+     load("va12_m3.rda")
+ } else {
+     sat3 <- raschmix(resp2 ~ 1, data = va12, k = 3, scores = "satur ..." ... [TRUNCATED] 
3 : * * *
3 : * * *
3 : * * *

> library("lmtest")
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric


Attaching package: ‘lmtest’

The following object is masked _by_ ‘.GlobalEnv’:

    ip


> tabS <- data.frame(model = c("saturated", "restricted (saturated)", 
+     "mean-variance", "restricted (mean-variance)"), k = sapply(list(sat3, 
+  .... [TRUNCATED] 

> trellis.par.set(theme = standard.theme(color = FALSE))

> xyplot(mvR3)

> session <- sessionInfo()

> Rversion <- paste(session$R.version$major, session$R.version$minor, 
+     sep = ".")

> psyversion <- session$otherPkgs$psychomix$Version

 *** Run successfully completed ***
> proc.time()
   user  system elapsed 
 72.804   0.128  72.959 
