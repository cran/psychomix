
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "psychomix"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('psychomix')
Loading required package: flexmix
Loading required package: lattice
Loading required package: psychotools
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("btmix")
> ### * btmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: btmix
> ### Title: Finite Mixtures of Bradley-Terry Models
> ### Aliases: btmix FLXMCbtreg
> ### Keywords: paired comparisons Bradley-Terry model mixture model
> 
> ### ** Examples
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("effectsplot")
> ### * effectsplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: effectsplot
> ### Title: Effects Displays for Concomitant Variables in Finite Mixture
> ###   Models
> ### Aliases: effectsplot effectsplot.efflist effectsplot.effpoly
> ###   allEffects.btmix allEffects.mptmix allEffects.raschmix effect.btmix
> ###   effect.mptmix effect.raschmix effectsplot,raschmix-method
> ###   effectsplot,btmix-method effectsplot,mptmix-method
> ### Keywords: hplot effects plot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## data on party preferences in Germany
> ##D ## (omit single observation with education = 1)
> ##D data("GermanParties2009", package = "psychotools")
> ##D gp <- subset(GermanParties2009, education != "1")
> ##D gp$education <- factor(gp$education)
> ##D 
> ##D ## fit Bradley-Terry mixture, see ?btmix for more details
> ##D ## and a fully-worked example
> ##D set.seed(2)
> ##D cm4 <- btmix(preference ~ gender + education + age + crisis, data = gp, k = 4, nrep = 1)
> ##D 
> ##D ## inspect mixture and effects
> ##D library("lattice")
> ##D xyplot(cm4)
> ##D effectsplot(cm4)
> ##D 
> ##D ## effect of education
> ##D eff4 <- allEffects(cm4)
> ##D effectsplot(eff4, selection = "education")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("mptmix")
> ### * mptmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mptmix
> ### Title: Finite Mixtures of Multinomial Processing Tree Models
> ### Aliases: mptmix FLXMCmpt
> ### Keywords: mixture model
> 
> ### ** Examples
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("raschmix")
> ### * raschmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: raschmix
> ### Title: Finite Mixtures of Rasch Models
> ### Aliases: raschmix FLXMCrasch
> ### Keywords: item response Rasch model mixture model
> 
> ### ** Examples
> 
> ##########
> ## Data ##
> ##########
> 
> ## simulate response from Rost's scenario 2 (with 2 latent classes)
> set.seed(1)
> r2 <- simRaschmix(design = "rost2")
> 
> ## plus informative and non-informative concomitants
> d <- data.frame(
+   x1 = rbinom(nrow(r2), prob = c(0.4, 0.6)[attr(r2, "cluster")], size = 1),
+   x2 = rnorm(nrow(r2))
+ )
> d$resp <- r2
> 
> ## fit model with 2 latent classes (here the number is known a priori)
> m <- raschmix(r2, k = 2, scores = "saturated")
2 : * * *
> summary(m)

Call:
raschmix(formula = r2, k = 2, scores = "saturated")

       prior size post>0 ratio
Comp.1   0.5  830   1301 0.638
Comp.2   0.5  819   1284 0.638

Item Parameters:
           Comp.1     Comp.2
Item01  2.6259651 -2.5473708
Item02  2.1238482 -2.1065270
Item03  1.3804502 -1.6724719
Item04  0.8532003 -1.0300670
Item05  0.3131440 -0.2238842
Item06 -0.2936246  0.2739371
Item07 -0.8695492  0.9565315
Item08 -1.4456305  1.5520418
Item09 -2.0528893  2.0682463
Item10 -2.6349141  2.7295642

'log Lik.' -8829.039 (df=35)
AIC: 17728.08   BIC: 17917.35 

> 
> ## see below for examples which do not use this a priori information
> ## (these take a little longer to compute) 
> 
> 
> 
> ## optionally: leverage mRm package for faster computation of
> ## starting values
> ## Not run: 
> ##D library("mRm")
> ##D ## fit 2-component model
> ##D m1b_mrm <- raschmix(r2, k = 2, score = "saturated", cluster = "mrm")
> ##D ## essentially identical to previous solution
> ##D table(clusters(m1b), clusters(m1b_mrm))   
> ##D worth(m1b) - worth(m1b_mrm)
> ## End(Not run)
> 
> 
> 
> ###########################
> ## Concomitant variables ##
> ###########################
> 
> ## employ concomitant variables (x1 = informative, x2 = not)
> ## Not run: 
> ##D ## fit model
> ##D cm2 <- raschmix(resp ~ x1 + x2, data = d, k = 2:3, score = "meanvar")
> ##D 
> ##D ## BIC selection
> ##D rbind(m2 = BIC(m2), cm2 = c(NA, BIC(cm2)))
> ##D cm2b <- getModel(cm2, which = "BIC")
> ##D 
> ##D ## concomitant coefficients
> ##D parameters(cm2b, which = "concomitant")
> ## End(Not run)
> 
> 
> ##########
> ## Misc ##
> ##########
> 
> ## note: number of clusters can either be chosen directly
> ## or directly selected via AIC (or BIC, ICL)
> ## Not run: 
> ##D raschmix(r2, k = 2)
> ##D raschmix(r2, k = 1:3, which = "AIC")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("simRaschmix")
> ### * simRaschmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simRaschmix
> ### Title: Simulate Data from Rasch Mixture Models
> ### Aliases: simRaschmix
> ### Keywords: item response Rasch model mixture model simulated data
> 
> ### ** Examples
> 
> #################
> ## Rost's DGPs ##
> #################
> 
> set.seed(1990)
> 
> ## DGP 1 with just one latent class 
> r1 <- simRaschmix(design = "rost1")
> ## less than 1800 observations because the extreme scorers have been removed
> table(attr(r1, "ability"))

-2.7 -0.9  0.9  2.7 
 381  449  449  380 
> table(rowSums(r1))

  1   2   3   4   5   6   7   8   9 
191 217 178 146 166 179 191 198 193 
> 
> ## DGP 2 with 2 equally large latent classes
> r2 <- simRaschmix(design = "rost2", extreme = TRUE)
> ## exactly 1800 observations including the extreme scorers
> table(attr(r2, "ability"))

-2.7 -0.9  0.9  2.7 
 450  450  450  450 
> table(rowSums(r2))

  0   1   2   3   4   5   6   7   8   9  10 
 82 188 202 187 165 126 196 195 194 193  72 
> 
> ## DGP 3 with 3 latent classes
> r3 <- simRaschmix(design = "rost3")
> ## item parameters in the three latent classes
> attr(r3, "difficulty")
      [,1] [,2] [,3]
 [1,]  2.7 -2.7 -0.5
 [2,]  2.1 -2.1  0.5
 [3,]  1.5 -1.5 -0.5
 [4,]  0.9 -0.9  0.5
 [5,]  0.3 -0.3 -0.5
 [6,] -0.3  0.3  0.5
 [7,] -0.9  0.9 -0.5
 [8,] -1.5  1.5  0.5
 [9,] -2.1  2.1 -0.5
[10,] -2.7  2.7  0.5
> 
> 
> ####################################
> ## flexible specification of DGPs ##
> ####################################
> 
> set.seed(482)
> 
> ## number of observations
> nobs <- 8
> 
> ## relative weights
> weights <- c(1/4, 3/4)
> ## exact weights: either summing to nobs or an integer division thereof
> weights <- c(2, 6)
> weights <- c(1, 3)
> ## weights as function
> ## here the result is the same as when specifying relative weights
> weights <- function(n) sample(size = n, 1:2, prob = c(1/4, 3/4), replace
+ = TRUE)
> 
> ## class 1: only ability level 0
> ## class 2: normally distributed abilities with mean = 2 and sd = 1
> ability <- cbind(c(0, 0), c(2, 1))
> ## class 1: 3 ability levels (-1, 0, 1); class 2: 2 ability levels (-0.5, 0.5)
> ## with equal probabilities and frequencies, repectively
> ability <- array(c(cbind(-1:1, rep(1/3, 3)), cbind(-1:1/2, c(0.5, 0, 0.5))), 
+   dim = c(3, 2, 2))
> ability <- array(c(cbind(-1:1, rep(1, 3)), cbind(-1:1/2, c(1, 0, 1))),
+   dim = c(3, 2, 2))
> ## ability as function
> ability <- list(
+   function(n) rnorm(n, mean = 0, sd = 0.5),
+   function(n) sample(c(-0.5, 0.5), size = n, replace = TRUE)
+ )
> 
> ## difficulty per latent class
> difficulty <- cbind(c(-1,1,rep(0,8)), c(rep(0,8),1,-1))
> 
> ## simulate data
> dat <- simRaschmix(design = list(nobs = nobs, weights = weights,
+   ability = ability, difficulty = difficulty))
> 
> ## inspect attributes and raw scores
> table(attr(dat, "cluster"))

1 2 
3 5 
> hist(attr(dat, "ability"))
> barplot(table(rowSums(dat)))
> attr(dat, "difficulty")
      [,1] [,2]
 [1,]   -1    0
 [2,]    1    0
 [3,]    0    0
 [4,]    0    0
 [5,]    0    0
 [6,]    0    0
 [7,]    0    0
 [8,]    0    0
 [9,]    0    1
[10,]    0   -1
> 
> 
> ## specification of DGP only via ability and difficulty
> ## one vector of abilities of all subjects
> ability <- c(rnorm(4, mean = 0, sd = 0.5), sample(c(-0.5, 0.5), size = 4, 
+   replace = TRUE))
> ## difficulty per subject
> difficulty <- matrix(c(rep(c(-1,1,rep(0,8)), 4), rep(c(rep(0,8),1,-1), 4)),
+   nrow = 8, byrow = TRUE)
> ## simulate data
> dat <- simRaschmix(design = list(ability = ability, difficulty = difficulty))
> 
> ## inspect attributes and raw scores
> hist(attr(dat, "ability"))
> barplot(table(rowSums(dat)))
> attr(dat, "difficulty")
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
[1,]   -1    1    0    0    0    0    0    0    0     0
[2,]   -1    1    0    0    0    0    0    0    0     0
[3,]   -1    1    0    0    0    0    0    0    0     0
[4,]   -1    1    0    0    0    0    0    0    0     0
[5,]    0    0    0    0    0    0    0    0    1    -1
[6,]    0    0    0    0    0    0    0    0    1    -1
[7,]    0    0    0    0    0    0    0    0    1    -1
[8,]    0    0    0    0    0    0    0    0    1    -1
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.24 0.012 1.253 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
